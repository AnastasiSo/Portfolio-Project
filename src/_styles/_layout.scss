.container {
  width: 100%;
  margin: 0 auto;
  padding: 0 $layout-margin;
  max-width: $layout-max-width;
}

.row {
  display: flex;
  flex-wrap: wrap;

  flex: none; // ?
}

@media (min-width: $breakpoint-sm) {
  .container {
    padding: 0 $layout-padding-sm;
  }
}

@media (min-width: $breakpoint-md) {
  .container {
    padding: 0 $layout-padding-md;
  }
}

@media (min-width: $breakpoint-lg) {
  .container {
    padding: 0 $layout-padding-lg;
  }
}

.column {
  flex: none;
  padding: 0 $layout-margin;

  &.center {
    margin: 0 auto;
  }

  @for $i from 1 through $grid-columns {
    &.column-#{$i} {
      width: percentage(math.div($i, $grid-columns));
    }
  }

  // Column defs for SM size (SM breakpoint and up)
  @media (min-width: $breakpoint-sm) {
    padding-left: math.div($layout-spacing, 2);
    padding-right: math.div($layout-spacing, 2);

    @for $i from 1 through $grid-columns {
      &.column-sm-#{$i} {
        width: percentage(math.div($i, $grid-columns));
      }
    }
  }

  // Column defs for MD size (MD breakpoint and up)
  @media (min-width: $breakpoint-md) {
    @for $i from 1 through $grid-columns {
      &.column-md-#{$i} {
        width: percentage(math.div($i, $grid-columns));
      }
    }
  }

  // Column defs for LG size (LG breakpoint and up)
  @media (min-width: $breakpoint-lg) {
    @for $i from 1 through $grid-columns {
      &.column-lg-#{$i} {
        width: percentage(math.div($i, $grid-columns));
      }
    }
  }
}
